{
  "stats": {
    "suites": 4,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2025-10-03T08:42:38.414Z",
    "end": "2025-10-03T08:42:38.429Z",
    "duration": 15,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "04733450-f6a1-401f-aeed-28ce52802433",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2de4319d-a09c-4705-bb48-0e24952aabae",
          "title": "AddTask Function Test",
          "fullFile": "C:\\Users\\chatc\\IFN636_A2\\backend\\test\\example_test.js",
          "file": "\\test\\example_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new task successfully",
              "fullTitle": "AddTask Function Test should create a new task successfully",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request data\nconst req = {\n  user: { id: new mongoose.Types.ObjectId() },\n  body: { title: \"New Task\", description: \"Task description\", deadline: \"2025-12-31\" }\n};\n// Mock task that would be created\nconst createdTask = { _id: new mongoose.Types.ObjectId(), ...req.body, userId: req.user.id };\n// Stub Task.create to return the createdTask\nconst createStub = sinon.stub(Task, 'create').resolves(createdTask);\n// Mock response object\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.spy()\n};\n// Call function\nawait addTask(req, res);\n// Assertions\nexpect(createStub.calledOnceWith({ userId: req.user.id, ...req.body })).to.be.true;\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith(createdTask)).to.be.true;\n// Restore stubbed methods\ncreateStub.restore();",
              "err": {},
              "uuid": "fcdef9d0-b653-4b98-bf2d-ccb48259a164",
              "parentUUID": "2de4319d-a09c-4705-bb48-0e24952aabae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if an error occurs",
              "fullTitle": "AddTask Function Test should return 500 if an error occurs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Stub Task.create to throw an error\nconst createStub = sinon.stub(Task, 'create').throws(new Error('DB Error'));\n// Mock request data\nconst req = {\n  user: { id: new mongoose.Types.ObjectId() },\n  body: { title: \"New Task\", description: \"Task description\", deadline: \"2025-12-31\" }\n};\n// Mock response object\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.spy()\n};\n// Call function\nawait addTask(req, res);\n// Assertions\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWithMatch({ message: 'DB Error' })).to.be.true;\n// Restore stubbed methods\ncreateStub.restore();",
              "err": {},
              "uuid": "49ae3b65-8895-4d67-8fcf-da3baa357533",
              "parentUUID": "2de4319d-a09c-4705-bb48-0e24952aabae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fcdef9d0-b653-4b98-bf2d-ccb48259a164",
            "49ae3b65-8895-4d67-8fcf-da3baa357533"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "3bf9ca04-afd5-49bd-8e63-16c5b4d4e7c3",
          "title": "Update Function Test",
          "fullFile": "C:\\Users\\chatc\\IFN636_A2\\backend\\test\\example_test.js",
          "file": "\\test\\example_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update task successfully",
              "fullTitle": "Update Function Test should update task successfully",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock task data\nconst taskId = new mongoose.Types.ObjectId();\nconst existingTask = {\n  _id: taskId,\n  title: \"Old Task\",\n  description: \"Old Description\",\n  completed: false,\n  deadline: new Date(),\n  save: sinon.stub().resolvesThis(), // Mock save method\n};\n// Stub Task.findById to return mock task\nconst findByIdStub = sinon.stub(Task, 'findById').resolves(existingTask);\n// Mock request & response\nconst req = {\n  params: { id: taskId },\n  body: { title: \"New Task\", completed: true }\n};\nconst res = {\n  json: sinon.spy(), \n  status: sinon.stub().returnsThis()\n};\n// Call function\nawait updateTask(req, res);\n// Assertions\nexpect(existingTask.title).to.equal(\"New Task\");\nexpect(existingTask.completed).to.equal(true);\nexpect(res.status.called).to.be.false; // No error status should be set\nexpect(res.json.calledOnce).to.be.true;\n// Restore stubbed methods\nfindByIdStub.restore();",
              "err": {},
              "uuid": "bfd1ec7f-e02f-43d7-889c-9e7ad37f7781",
              "parentUUID": "3bf9ca04-afd5-49bd-8e63-16c5b4d4e7c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if task is not found",
              "fullTitle": "Update Function Test should return 404 if task is not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const findByIdStub = sinon.stub(Task, 'findById').resolves(null);\nconst req = { params: { id: new mongoose.Types.ObjectId() }, body: {} };\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.spy()\n};\nawait updateTask(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ message: 'Task not found' })).to.be.true;\nfindByIdStub.restore();",
              "err": {},
              "uuid": "dac3b576-7d8d-45a0-8e9c-c13f541ef184",
              "parentUUID": "3bf9ca04-afd5-49bd-8e63-16c5b4d4e7c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 on error",
              "fullTitle": "Update Function Test should return 500 on error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const findByIdStub = sinon.stub(Task, 'findById').throws(new Error('DB Error'));\nconst req = { params: { id: new mongoose.Types.ObjectId() }, body: {} };\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.spy()\n};\nawait updateTask(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.called).to.be.true;\nfindByIdStub.restore();",
              "err": {},
              "uuid": "2a0eb19b-4a62-4af4-87ab-ba857b67b0a8",
              "parentUUID": "3bf9ca04-afd5-49bd-8e63-16c5b4d4e7c3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bfd1ec7f-e02f-43d7-889c-9e7ad37f7781",
            "dac3b576-7d8d-45a0-8e9c-c13f541ef184",
            "2a0eb19b-4a62-4af4-87ab-ba857b67b0a8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "b3e5aaea-6f51-456e-8622-9cd6275ef9e0",
          "title": "GetTask Function Test",
          "fullFile": "C:\\Users\\chatc\\IFN636_A2\\backend\\test\\example_test.js",
          "file": "\\test\\example_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return tasks for the given user",
              "fullTitle": "GetTask Function Test should return tasks for the given user",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock user ID\nconst userId = new mongoose.Types.ObjectId();\n// Mock task data\nconst tasks = [\n  { _id: new mongoose.Types.ObjectId(), title: \"Task 1\", userId },\n  { _id: new mongoose.Types.ObjectId(), title: \"Task 2\", userId }\n];\n// Stub Task.find to return mock tasks\nconst findStub = sinon.stub(Task, 'find').resolves(tasks);\n// Mock request & response\nconst req = { user: { id: userId } };\nconst res = {\n  json: sinon.spy(),\n  status: sinon.stub().returnsThis()\n};\n// Call function\nawait getTasks(req, res);\n// Assertions\nexpect(findStub.calledOnceWith({ userId })).to.be.true;\nexpect(res.json.calledWith(tasks)).to.be.true;\nexpect(res.status.called).to.be.false; // No error status should be set\n// Restore stubbed methods\nfindStub.restore();",
              "err": {},
              "uuid": "38ed41bf-342b-4ade-a48f-d48a610d7f33",
              "parentUUID": "b3e5aaea-6f51-456e-8622-9cd6275ef9e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 on error",
              "fullTitle": "GetTask Function Test should return 500 on error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Stub Task.find to throw an error\nconst findStub = sinon.stub(Task, 'find').throws(new Error('DB Error'));\n// Mock request & response\nconst req = { user: { id: new mongoose.Types.ObjectId() } };\nconst res = {\n  json: sinon.spy(),\n  status: sinon.stub().returnsThis()\n};\n// Call function\nawait getTasks(req, res);\n// Assertions\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWithMatch({ message: 'DB Error' })).to.be.true;\n// Restore stubbed methods\nfindStub.restore();",
              "err": {},
              "uuid": "646ce1fe-6716-4908-8662-0470882b4212",
              "parentUUID": "b3e5aaea-6f51-456e-8622-9cd6275ef9e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "38ed41bf-342b-4ade-a48f-d48a610d7f33",
            "646ce1fe-6716-4908-8662-0470882b4212"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "f703763f-14b2-4e88-aa2f-278d76c78f0f",
          "title": "DeleteTask Function Test",
          "fullFile": "C:\\Users\\chatc\\IFN636_A2\\backend\\test\\example_test.js",
          "file": "\\test\\example_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete a task successfully",
              "fullTitle": "DeleteTask Function Test should delete a task successfully",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request data\nconst req = { params: { id: new mongoose.Types.ObjectId().toString() } };\n// Mock task found in the database\nconst task = { remove: sinon.stub().resolves() };\n// Stub Task.findById to return the mock task\nconst findByIdStub = sinon.stub(Task, 'findById').resolves(task);\n// Mock response object\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.spy()\n};\n// Call function\nawait deleteTask(req, res);\n// Assertions\nexpect(findByIdStub.calledOnceWith(req.params.id)).to.be.true;\nexpect(task.remove.calledOnce).to.be.true;\nexpect(res.json.calledWith({ message: 'Task deleted' })).to.be.true;\n// Restore stubbed methods\nfindByIdStub.restore();",
              "err": {},
              "uuid": "596a80f7-3d7d-4776-ba14-0deb7cf368ec",
              "parentUUID": "f703763f-14b2-4e88-aa2f-278d76c78f0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if task is not found",
              "fullTitle": "DeleteTask Function Test should return 404 if task is not found",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Stub Task.findById to return null\nconst findByIdStub = sinon.stub(Task, 'findById').resolves(null);\n// Mock request data\nconst req = { params: { id: new mongoose.Types.ObjectId().toString() } };\n// Mock response object\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.spy()\n};\n// Call function\nawait deleteTask(req, res);\n// Assertions\nexpect(findByIdStub.calledOnceWith(req.params.id)).to.be.true;\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ message: 'Task not found' })).to.be.true;\n// Restore stubbed methods\nfindByIdStub.restore();",
              "err": {},
              "uuid": "d3515d80-f62a-48a3-a7d6-ef37bf6ef30f",
              "parentUUID": "f703763f-14b2-4e88-aa2f-278d76c78f0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if an error occurs",
              "fullTitle": "DeleteTask Function Test should return 500 if an error occurs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Stub Task.findById to throw an error\nconst findByIdStub = sinon.stub(Task, 'findById').throws(new Error('DB Error'));\n// Mock request data\nconst req = { params: { id: new mongoose.Types.ObjectId().toString() } };\n// Mock response object\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.spy()\n};\n// Call function\nawait deleteTask(req, res);\n// Assertions\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWithMatch({ message: 'DB Error' })).to.be.true;\n// Restore stubbed methods\nfindByIdStub.restore();",
              "err": {},
              "uuid": "4d74f01e-1ed9-4203-920b-ba287da729ff",
              "parentUUID": "f703763f-14b2-4e88-aa2f-278d76c78f0f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "596a80f7-3d7d-4776-ba14-0deb7cf368ec",
            "d3515d80-f62a-48a3-a7d6-ef37bf6ef30f",
            "4d74f01e-1ed9-4203-920b-ba287da729ff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.4"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}